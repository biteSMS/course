首先要明确，既然你用了 TypeScript，不同类型的返回虽然可以做类型标注，但是这意味着这个函数的返回是不可靠的，需要动态对返回值是否为 Error 进行判断，如果别人来调用你的这个函数，他没办法通过 try catch 去捕获错误，而是通过判断返回值，如果这是一个比较基础的库函数，会直接打乱维护者对于代码的理解。一部分用 return，一部分又直接抛出错误。

接着思考，你能 return 出来的错误，一定是比较接近业务逻辑的错误，而代码本身的错误怎么办？接着你会发现，除了要处理 return 出来的错误，还得 catch 一下代码的运行时错误，这样的代码简直是灾难。

实践发现用了 try catch 很多人会写出这种代码：

try catch 创建了一个作用域

有的人说会把所有逻辑放到 try 里面，但是这样在 catch 到错误时你就没办法精确针对每一个 Error 进行错误提示了。

通常很多时候我们还是需要处理 err 的，不是直接把错误忽略去返回一个符合预期的值。但是如果 catch 把 err return 了，也就变成了题主的另一种方案了。。我更倾向于把 err 单独放出来，显式的去处理，就像 Golang 一样，虽然有所被诟病到处都 if err
借鉴自 golang 模式的错误处理方式